mod gyllir::doc::symbols::variable;

import gyllir::utils::options;
import gyllir::utils::string;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;
import gyllir::doc::types::_;


import std::io;
import std::collection::vec;
import std::config::_;

/**
 * A variable documentation symbol
 */
pub class Variable over Symbol {

    /// The return type of the function
    let mut _varType = Type::none ();

    /// True iif the variable is mutable
    let _mut : bool;

    /// The value of the variable
    let _value : [c8];
    
    /**
     * Create a variable from a configuration
     */
    pub self (config : &Config)
        with super (config),
    _mut = (config ["mut"]?).toOr (false),
    _value = (config ["value"]?).toOr (""s8)
    {                
        match config ["var_type"]? {
            Ok (type : _) => { self._varType = loader::toType (type); }
        }
    }


    pub def getType (self)-> &Type {
        self._varType
    }

    pub def isMutable (self)-> bool {
        self._mut
    }

    pub def getValue (self)-> [c8] {
        self._value
    }
        
    

    impl Streamable;            
}
