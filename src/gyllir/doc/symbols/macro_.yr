mod gyllir::doc::symbols::macro_;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;

import std::io;
import std::collection::vec;
import std::config::_;

/**
 * A macro documentation symbol
 */
pub class Macro over Symbol {

    /// The of symbols declared in the macro
    let dmut _cstrs = Vec!{[c8]}::new ();

    /// The list of parameters of the macro
    let dmut _rules = Vec!{&Symbol}::new ();
    
    /**
     * Create a macro from a configuration
     */
    pub self (config : &Config)
        with super (config)
    {
        match config ["cstrs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    self._cstrs:.push ((arr [i]?).toOr (""s8));
                }
            }
        }                
        match config ["rules"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._rules:.push (Rule::new (arr [i]));
                    });
                }
            }
        }
    }


    impl Streamable;            
}
