mod gyllir::doc::symbols::module;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;

import std::io;
import std::collection::vec;
import std::config::_;

/**
 * A module documentation symbol
 */
pub class Module over Symbol {

    /// The of symbols declared in the module
    let dmut _childs = Vec!{&Symbol}::new ();

    /**
     * Create an empty module
     */
    pub self empty () {}
    
    /**
     * Create a module from a configuration
     */
    pub self (config : &Config)
        with super (config)
    {
        match config ["childs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._childs:.push (loader::toSymbol (arr [i]));
                    });
                }
            }
        }
    }
    
    /**
     * @returns: the list of children of the module
     */
    pub def getChilds (self)-> [&Symbol] {    
        self._childs[]
    }        

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write ("Module (", self._name, ")");
        }
    }
}
