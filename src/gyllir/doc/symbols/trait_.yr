mod gyllir::doc::symbols::trait_;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;

import std::io;
import std::collection::vec;
import std::config;

/**
 * A trait documentation symbol
 */
pub class Trait over Symbol {

    /// The of symbols declared in the trait
    let dmut _childs = Vec!{&Symbol}::new ();

    /**
     * Create a trait from a configuration
     */
    pub self (config : &Config)
        with super (config)
    {
        match config ["childs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._childs:.push (loader::toSymbol (arr [i]));
                    });
                }
            }
        }
    }

    pub def getChilds (self)-> [&Symbol] {
        self._childs[]
    }


    impl Streamable;            
}
