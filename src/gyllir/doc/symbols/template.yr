mod gyllir::doc::symbols::template;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;

import std::io;
import std::collection::vec;
import std::config::_;

/**
 * A template documentation symbol
 */
pub class Template over Symbol {

    /// The of symbols declared in the template
    let dmut _child : &Symbol;

    /// The list of parameters of the template
    let dmut _params = Vec!{[c8]}::new ();

    /// The test of the template
    let _test : [c8];
    
    /**
     * Create a template from a configuration
     */
    pub self (config : &Config)
        with super (config),
    _test = (config ["test"]?).toOr (""s8),
    _child = {
        alias loader::toSymbol (config["child"])
    } catch {
        _ => Symbol::empty ()
    }
    {
        match config ["params"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    self._params:.push ((arr [i]?).toOr (""s8));
                }
            }
        }

        self._child:.setProtection (self._protection);
    }


    pub def getChild (self)-> &Symbol {
        self._child
    }

    pub def getParams (self)-> [[c8]] {
        self._params[]
    }

    pub def getTest (self)-> [c8] {
        self._test
    }
    

    impl Streamable;            
}
