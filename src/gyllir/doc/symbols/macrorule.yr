mod gyllir::doc::symbols::macrorule;

import std::io;
import std::config;

import gyllir::doc::symbols::_;
import gyllir::doc::types::_;
import gyllir::utils::options;
import gyllir::doc::loader;

import std::collection::vec;

/**
 * A function parameter
 */
pub class Rule over Symbol {

    /// The rule of the macro in a string
    let _rule : [c8];

    /// The skipped tokens of the rule
    let dmut _skips = Vec!{[c8]}::new ();

    pub self (config : &Config)
        with super (config),
    _rule = (config ["rule"]?).toOr (""s8)        
    {
        match config ["skips"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    self._skips:.push ((arr [i]?).toOr (""s8));
                }
            }
        }                

    }

    impl Streamable;    
}
