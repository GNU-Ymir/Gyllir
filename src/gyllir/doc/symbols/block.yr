mod gyllir::doc::symbols::block;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;

import std::io;
import std::collection::vec;
import std::config;

/**
 * A block documentation symbol
 */
pub class Block over Symbol {

    /// The of symbols declared in the block
    let dmut _childs = Vec!{&Symbol}::new ();

    /**
     * Create an empty block
     */
    pub self empty () {}
    
    /**
     * Create a block from a configuration
     */
    pub self (config : &Config)
        with super (config)
    {
        match config ["childs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        let dmut ch = loader::toSymbol (arr [i]);
                        ch:.setProtection (self._protection);
                        self._childs:.push (ch);
                    });
                }
            }
        }
    }
    
    /**
     * @returns: the list of children of the block
     */
    pub def getChilds (self)-> [&Symbol] {    
        self._childs[]
    }        

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write ("Block (", self._name, ")");
        }
    }
}
