mod gyllir::doc::symbols::class_;

import gyllir::utils::options;
import gyllir::doc::symbols::_;
import gyllir::doc::loader;
import gyllir::doc::types::_;

import std::io;
import std::collection::vec;
import std::config::_;

/**
 * An class documentation symbol
 */
pub class Class over Symbol {

    // the list of fields of the class
    let dmut _fields = Vec!{&Parameter}::new ();

    /// The type of the ancestor class
    let mut _ancestor = Type::none ();

    /// Is the class abstract
    let mut _abstract = false;

    /// Is the class final
    let mut _final = false;

    /// The list of assertion in the class
    let dmut _asserts = Vec!{&Assert}::new ();

    /// The list of constructor of the class
    let dmut _cstrs = Vec!{&Function}::new ();

    /// The list of implementation
    let dmut _impls = Vec!{&Impl}::new ();

    /// The list of methods
    let dmut _methods = Vec!{&Method}::new ();

    // The list of template conditions
    let dmut _templateCond = Vec!{&TemplateCond}::new ();

    let dmut _templates = Vec!{&Template}::new ();
    
    /**
     * Create a class from a configuration
     */
    pub self (config : &Config)
        with super (config)
    {
        match config ["fields"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._fields:.push (Parameter::new (arr [i]));
                    });
                }
            }
        }

        match config["abstract"]? {
            Ok (Str (str-> x : _)) => { self._abstract = (x == "true"); }
        }

        match config["final"]? {
            Ok (Str (str-> x : _)) => { self._final = (x == "true"); }
        }

        
        match config ["asserts"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._asserts:.push (Assert::new (arr [i]));
                    });
                }
            }
        }

        match config ["cstrs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._cstrs:.push (Function::new (arr [i]));
                    });
                }
            }
        }

        match config ["impls"]? {            
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._impls:.push (Impl::new (arr [i]));
                    });
                }
            }
        }
        
        match config ["others"]? {            
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        if ((arr[i]["type"]?).toOr (""s8) == "impl"s8) {
                            self._impls:.push (Impl::new (arr [i]));
                        } else if ((arr[i]["type"]?).toOr (""s8) == "template_condition"s8) {
                            self._templateCond:.push (TemplateCond::new (arr[i]));
                        } else if ((arr[i]["type"]?).toOr (""s8) == "template"s8) {
                            self._templates:.push (Template::new (arr[i]));
                        }
                    });
                }
            }
        }

        match config ["methods"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len () {
                    __pragma!trusted ({
                        self._methods:.push (Method::new (arr [i]));
                    });
                }
            }
        }

        match config ["ancestor"]? {
            Ok (type : _) => { self._ancestor = loader::toType (type); }
        }

        
        
    }
    
    /**
     * @returns: true iif the class is final
     */
    pub def isFinal (self)-> bool {
        self._final
    }

    /**
     * @returns: true iif the class is abstract
     */
    pub def isAbstract (self)-> bool {
        self._abstract
    }
    
    /**
     * @returns: the ancestor of the class
     */
    pub def getAncestor (self)-> &Type {
        self._ancestor
    }

    /**
     * @returns: the list of constructor of the class
     */
    pub def getCstrs (self)-> [&Function] {
        self._cstrs[]
    }

    /**
     * @returns: the list of fields of the class
     */
    pub def getFields (self)-> [&Parameter] {
        self._fields[]
    }
    
    /**
     * @returns: the list of methods of the class
     */
    pub def getMethods (self)-> [&Method] {
        self._methods[]
    }

    /**
     * @returns: the list of assertion of the class
     */
    pub def getAsserts (self)-> [&Assert] {
        self._asserts[]
    }

    /**
     * @returns: the list of impl of the class
     */
    pub def getImpls (self)-> [&Impl] {
        self._impls[]
    }

    pub def getTemplates (self)-> [&Template] {
        self._templates[]
    }
    
    /**
     * @returns: the list of template conditions
     */
    pub def getTemplateConds (self)-> [&TemplateCond] {
        self._templateCond[]
    }

    impl Streamable;            
}
