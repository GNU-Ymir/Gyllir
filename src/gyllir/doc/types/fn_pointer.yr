mod gyllir::doc::types::fn_pointer;

import gyllir::doc::types::base;
import std::config::_, std::io, std::conv;
import gyllir::utils::options;
import gyllir::doc::loader;
import std::collection::vec;


/**
 * A fixed size fnPointer
 */
pub class FnPointerType over Type {

    // The return type of the fn pointer
    let _ret : &Type;

    // The inner types of the tuple
    let dmut _inner = Vec!{&Type}::new ();
    
    /**
     * @params: 
     *    - name: the name of the type ("fn_pointer")
     *    - isMut: true if the type is mutable
     *    - conf: the configuration of the fnPointer type (json content)
     */
    pub self (name : [c8], isMut : bool, conf : &Config)
        with super (name-> name, isMut-> isMut), _ret = {
            {
                loader::toType (conf["ret_type"])
            } catch {
                _ => Type::none ()
            }
        }
    {
        match conf["childs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len ()  {
                    self._inner:.push (loader::toType (arr[i]))?;
                }
            }
        }
    }

    /**
     * @returns: the parameter types of the fn pointer
     */
    pub def getParamTypes (self)-> [&Type] {
        self._inner[]
    }

    /**
     * @returns: the return type of the fn pointer
     */
    pub def getRetType (self)-> &Type {
        self._ret
    }
    
    impl Streamable;
    
}
