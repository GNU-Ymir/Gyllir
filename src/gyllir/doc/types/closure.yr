mod gyllir::doc::types::closure;

import gyllir::doc::types::base;
import std::config, std::io, std::conv;
import gyllir::utils::options;
import gyllir::doc::loader;
import std::collection::vec;


/**
 * A fixed size closure
 */
pub class ClosureType over Type {

    // The inner types of the tuple
    let dmut _inner = Vec!{&Type}::new ();
    
    /**
     * @params: 
     *    - name: the name of the type ("dg_pointer")
     *    - isMut: true if the type is mutable
     *    - conf: the configuration of the closure type (json content)
     */
    pub self (name : [c8], isMut : bool, conf : &Config)
        with super (name-> name, isMut-> isMut)
    {
        match conf["childs"][0]["childs"]? {
            Ok (arr : &Array) => {
                for i in 0us .. arr.len ()  {
                    self._inner:.push (loader::toType (arr[i]))?;
                }
            }
        }
    }    

    /**
     * @returns: the parameter types of the dg pointer
     */
    pub def getInnerTypes (self)-> [&Type] {
        self._inner[]
    }
    
    impl Streamable;
    
}
