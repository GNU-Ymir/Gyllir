mod gyllir::doc::dumper;

import std::fs::path;
import std::fs::file;
import std::config::_;
import std::io, std::conv;
import std::collection::vec;

import gyllir::doc::symbols::_;
import gyllir::doc::types::_;
import gyllir::doc::loader;
import gyllir::config::_;
import gyllir::doc::html::_;
import gyllir::repo::manager;

/**
 * This class is used to generate html files
 */
pub class DocDumper {

    /// the list of module doc.json files
    let _files : [&Path];

    /// The path of the directory that will get the documentations
    let _outDir : &Path;

    /// If true print verbose logs
    let _verbose = false;

    // The configuration of the repo
    let _config : GyllirConfig;

    // The context of the doc creator
    let dmut _context : &GyllirManager;
    
    /**
     * @params:
     *   - buildDir: the root of the building directory 
     *   - files: the list of files to parse
     *   - outDir: the directory in which dump the documentation
     *   - verbose: if true prints verbose logs
     */
    pub self (dmut context : &GyllirManager, conf : GyllirConfig, files : [&Path], outDir : &Path, verbose : bool = false)
        with  _files = files, _outDir = outDir, _verbose = verbose, _config = conf, _context = alias context
    {}

    /**
     * Generate the documentation
     */
    pub fn generate (self) {
        let dmut tree = MetaModule::new ();
        let dmut modules = Vec!{&Module}::new ();
        
        for j, i in self._files {
            with dmut f = File::open (i) {
                let perc = j.to!f32 () / (self._files.len).to!f32 () * 100.0f; 
                println (std::format::format ("[{0:.2}%] Loading {1:}"s8, perc, i.toStr ()))?;
                let module = Module::new (json::parse (f:.readAll ()));
                tree:.insert (module);
                modules:.push (module);
            } catch {
                _ => println ("Failed to read : ", i);
            }
        }

        fs::sys::removeDir (self._outDir, recursive-> true)?;
        fs::sys::createDir (self._outDir, recursive-> true)?;
        
        let ymir_res = Path::new ("/etc/gyllir/res");        
        if (!self._context.runProcess ("cp"s8, ["-r"s8, ymir_res.push ("js"s8).toStr (), self._outDir.toStr ()])) {
            println ("[ERROR] Creating doc directory");            
        }

        if (!self._context.runProcess ("cp"s8, ["-r"s8, ymir_res.push ("css"s8).toStr (), self._outDir.toStr ()])) {
            println ("[ERROR] Creating doc directory");            
        }

        if (!self._context.runProcess ("cp"s8, ["-r"s8, ymir_res.push ("ico"s8).toStr (), self._outDir.toStr ()])) {
            println ("[ERROR] Creating doc directory");            
        }
        
        let table = HtmlTable::new (tree);        
        for m in modules {
            self.generatePage (self._config.name, self._config.registry.getPath ().toStr (), table, m);
        }
    }

    prv fn generatePage (self, project : [c8], git : [c8], table : &HtmlTable, module : &Module) {
        let body = HtmlBody::new (project, module);
        let head = HtmlHeader::new (project, git, module.getName (), table, body);
        let foot = HtmlFooter::new (module.getName (), git);

        let dmut stream = StringStream::new ();
        head.dumpHtml (alias stream);
        foot.dumpHtml (alias stream);

        let path = Path::new (utils::path::toPath (module.getName ())).addExtension ("html"s8).toStr (sep-> "_"s8);
        with dmut f = File::create (self._outDir.push (path), write-> true) {
            f:.write (stream[]);
        } catch {
            err : _ => {
                println ("[ERROR] Creating index file");
                println (err);
            }
        }
        
    }

    
}
