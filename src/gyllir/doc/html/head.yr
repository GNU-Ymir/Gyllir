mod gyllir::doc::html::head;

import std::stream, std::fs::_, std::env;
import std::format, std::conv, std::io;

import gyllir::doc::symbols::_;
import gyllir::doc::html::node;
import gyllir::doc::html::table;

/**
 * Html header of a page 
 */
pub class HtmlHeader over HtmlNode {

    // The name of the project
    let _project : [c8];

    // The git repo
    let _git : [c8];
    
    // The name of the page
    let _name : [c8];

    // The toc of the page
    let _table : &HtmlTable;

    /**
     * Create a header for a page 
     * @params: 
     *   - name: the name of the page
     */
    pub self (project : [c8], git : [c8], name : [c8], table : &HtmlTable)
        with _project = project, _git = git, _name = name, _table = table
    {}

    /**
     * Dump the html content into the stream
     * @params:
     *   - stream: the stream to populate
     */
    pub over dumpHtml (self, dmut stream : &StringStream) {
        let html_head = self.readResource ();

        let dmut streamToc = StringStream::new ();
        self._table.dumpHtml (alias streamToc);

        let mut gitUrl = self._git;
        let githubStart = "git@github.com:"s8;
        if (gitUrl.len > githubStart.len && gitUrl[0us..githubStart.len] == githubStart) {
            gitUrl = "https://github.com/"s8 ~ gitUrl[githubStart.len .. $ - 4us];            
        }
        
        stream:.write (format (html_head,                               
                               self._project.to![c32] (),
                               gitUrl.to![c32] (),
                               // self._name.to![c32] (),
                               streamToc[].to![c32]()))?;
    }


    prv def readResource (self)-> [c8] {
        let ymir_res = Path::new (std::env::getEnv ("GYLLIR_HOME"s8)).push ("res"s8);

        let mut res = ""s8;
        with dmut f = File::open (ymir_res.push ("html"s8).push ("header.html"s8)) {
            res = f:.readAll ();
        } catch {
            _ => {}
        }

        return res;
    }
    
}
