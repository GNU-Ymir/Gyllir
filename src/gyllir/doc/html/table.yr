mod gyllir::doc::html::table;

import std::stream, std::fs::_, std::env;
import std::io;

import std::collection::map;
import gyllir::doc::formatter;

import std::stream;
import gyllir::doc::symbols::_;
import gyllir::doc::html::node;

/**
 * Module table html dumper
 */
pub class HtmlTable over HtmlNode {

    // The tree to dump into html
    let _tree = MetaModule::new ();

    /**
     * Index table
     * @params: 
     *    - tree: the tree to dump
     */
    pub self (tree : &MetaModule) with _tree = tree
    {}    

    /**
     * Dump the html content into the stream
     * @params:
     *   - stream: the stream to populate
     */
    pub over dumpHtml (self, dmut stream : &StringStream) {
        let leaf = self.readLeafResource ();

        for _, c in self._tree.getRoot ().getChilds () {
            self.dumpModule (c, alias stream, leaf);
        }
    }

    
    prv def dumpModule (self, node : &MetaNode, dmut stream : &StringStream, leafTemplate : [c8]) {
        let map = hmap#{
            "Name"s8 => node.getPath ().toStr (sep-> "::"s8)
        };

        formatter::format (alias stream, leafTemplate, map);
        if (node.getChilds ().len () != 0us) {
            for _, n in node.getChilds () {
                self.dumpModule (n, alias stream, leafTemplate);                
            }
        }
    }

    prv def readLeafResource (self)-> [c8] {
        let ymir_res = Path::new (std::env::getEnv ("GYLLIR_HOME"s8)).push ("res"s8);

        let mut res = ""s8;
        with dmut f = File::open (ymir_res.push ("html"s8).push ("leaf_node.html"s8)) {
            res = f:.readAll ();
        } catch {
            _ => {}
        }

        return res;
    }

    
    
}
