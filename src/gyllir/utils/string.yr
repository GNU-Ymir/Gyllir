mod gyllir::utils::string;
import std::stream, std::io;

/**
 * @returns: a string constructed from `a` where each occurence of `b` are replaced by `c`
 * @complexity: O (a.len * b.len)
 */
pub def replace (a : [c8], b : [c8], c : [c8])-> [c8] {
    let dmut stream = StringStream::new ();
    let mut i = 0us;
    while i < a.len {
        if i + b.len <= a.len {
            if a[i .. i + b.len] == b {
                stream:.write (c);
                i += b.len;
            } else {
                stream:.write (a[i]);
                i += 1us;
            }
        } else {
            stream:.write (a[i .. $]);
            break {}
        }
    }

    stream[]    
}
