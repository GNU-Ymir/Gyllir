mod gyllir::utils::git;

import gyllir::utils::errors;
import std::concurrency::process;
import std::fs::_;
import std::io;

pub fn init (cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["init"s8], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::ALREADY_INIT, subproc:.stderr ():.read ());
        }
    }
}

pub fn clone (url : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    let parent = cwd.parent ();
    fs::sys::createDir (parent)?;
    with dmut subproc = SubProcess::run ("git"s8, ["clone"s8, url, cwd.file ()], cwd-> parent) {        
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}


pub fn setRemote (url : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["remote"s8, "add"s8, "origin"s8, url], cwd-> cwd) {        
        let code = subproc:.wait ();
        if (code != 0) {
            with dmut subproc2 = SubProcess::run ("git"s8, ["remote"s8, "set-url"s8, "origin"s8, url], cwd-> cwd) {
                let code2 = subproc2:.wait ();
                if (code2 != 0) {
                    throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
                }
            } 
        }
    }    
}

pub fn push (tags : [[c8]], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["push"s8, "origin"s8] ~ tags, cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::ALREADY_INIT, subproc:.stderr ():.read ());
        }
    }
}


pub fn add (path : &Path)
    throws &GitError
{
    let parent = path.parent ();
    with dmut subproc = SubProcess::run ("git"s8, ["add"s8, path.file ()], cwd-> parent) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }
}

pub fn createBranch (name : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["branch"s8, name], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}

pub fn deleteBranch (name : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["branch"s8, "-D"s8, name], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}

pub fn createTag (name : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["tag"s8, name], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}

pub fn deleteTag (name : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["tag"s8, "-D"s8, name], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}

pub fn fetchTags (cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8,  ["fetch"s8, "--tags"s8, "--depth=1"s8], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }
}


pub fn checkout (name : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["checkout"s8, name], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}


pub fn getTagList (cwd : &Path = Path::new ("."))-> [c8]
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["tag"s8], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
        subproc:.stdout ():.read ()
    }    
}


pub fn commit (message : [c8], cwd : &Path = Path::new ("."))
    throws &GitError
{
    with dmut subproc = SubProcess::run ("git"s8, ["commit"s8, "-m"s8, message], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        }
    }    
}


pub fn userName (cwd : &Path = Path::new (".")) -> [c8]
    throws &GitError
{
    import std::stream;
    
    let dmut stream = StringStream::new ();
    with dmut subproc = SubProcess::run ("git"s8, ["config"s8,  "--global"s8, "--get"s8,  "user.name"s8], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        } else {
            stream:.write (subproc:.stdout ():.read ()[0us .. $ - 1us]);
        }
    }

    with dmut subproc = SubProcess::run ("git"s8, ["config"s8,  "--global"s8, "--get"s8,  "user.email"s8], cwd-> cwd) {
        let code = subproc:.wait ();
        if (code != 0) {
            throw GitError::new (GitErrorCode::UNKNOWN, subproc:.stderr ():.read ());
        } else {
            stream:.write (" <", subproc:.stdout ():.read ()[0us .. $ - 1us], ">");
        }
    }
    
    stream []
}
