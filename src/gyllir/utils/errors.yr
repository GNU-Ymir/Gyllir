mod gyllir::utils::errors;

import std::io;

pub enum
| ALREADY_INIT = 1u8
| UNKNOWN = 2u8
 -> GitErrorCode;


pub class GitError over Exception {

    pub let code : GitErrorCode;
    pub let msg  : [c8];
    
    pub self (code : GitErrorCode, msg : [c8]) with code = code, msg = msg {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            if (self.hasTrace ()) {
                stream:.write ("GitError (", utils::errors::to![c8] (self.code), ") : ", self.msg);
                stream:.write (self.getStackTrace ());
            } else {
                stream:.write ("GitError (", utils::errors::to![c8] (self.code), ") : ", self.msg);
            }
        }
    }
    
}

pub def to {C of [U], U of c8, T of GitErrorCode} (err : T)-> [c8] {
    match err {
        GitErrorCode::ALREADY_INIT => { "ALREADY_INIT"s8 }
        GitErrorCode::UNKNOWN      => { "UNKNOWN"s8 }
        _ => { ""s8 }
    }
}
