mod gyllir::args::doc;
import std::args, std::syntax::lexer, std::io, std::conv;
import gyllir::args::sub;
import etc::c::sysinfo;

struct
| verbose : YesNo
| j : i64 = cast!i64 (sysinfo::_yrt_get_nprocs ())
| inDir : [c32] = ""
| mut help : YesNo
 -> DocArgs;

/**
 * Sub command used to build the documentation of the repo
 * @example: 
 * =:bash===========
 * $ gyllir doc 
 * =================
 */
pub class @final DocCommand over SubCommand {

    let mut _args = DocArgs (YesNo::NO, YesNo::YES);
    
    pub self () with super (false) {}

    /**
     * Constructor called by the argument parser
     */
    pub self (args : [[c32]]) with super (true)
        throws &HelpPrinted
    {
        let parser = ArgumentParser!(DocArgs)::new ()
            :.info!"verbose" (short-> "v", comments-> "verbose mode")
            :.info!"j" (comments-> "number of parallel threads to spawn")
            :.info!"inDir" (comments-> "input directory for already dumped json files", short-> "i")
            :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true);        

        {
            self._args = parser.parse (["./usage"] ~ args);
        } catch {
            err : &ArgumentError => {
                println (parser.simpleUsage (cmd-> "gyllir doc"));
                println (parser.diagnosis (err));
                throw HelpPrinted::new ();
            }
            _ : &HelpRequired => {
                println (parser.usage (cmd-> "gyllir doc"));
                throw HelpPrinted::new ();
            }
        }
            
    }

    /**
     * @returns: the directory in which json files can be found
     */
    pub def inDir (self)-> [c8] {
        self._args.inDir.to![c8] ()
    }
    
    /**
     * @returns: true iif the option --verbose is set
     */
    pub def isVerbose (self)-> bool {
        self._args.verbose
    }

    /**
     * @returns: the number of thread to spawn 
     */
    pub def getNbThreads (self)-> u32 {
        cast!u32 (self._args.j)
    }

}
