mod gyllir::repo::builder;

import std::io;
import std::fs::_, std::env, std::args, std::config::_;
import gyllir::config::_;
import gyllir::repo::defaults;
import gyllir::repo::dependency;
import gyllir::repo::manager;
import std::collection::vec;
import std::concurrency::process;
import std::time::instant;
import std::syntax::tokenizer;

import gyllir::utils::git, gyllir::utils::errors;

/**
 * Build a repository
 */
pub class RepoBuilder {

    // The configuration of the repo to build
    let _conf : GyllirConfig;

    // The path of the repo to build
    let _cwd : &Path;

    // The context of the builder
    let dmut _context : &GyllirManager;
    
    /**
     * @params:
     *    - conf: the configuration of the repo to build
     *    - cwd: the directory of the repo to build
     */
    pub self (dmut context : &GyllirManager, conf : GyllirConfig, cwd : &Path = env::currentDir ())
        with _conf = conf, _cwd = cwd, _context = alias context
    {}
    
    /**
     * Build the repo
     */
    pub def construct (mut self, inDependency : bool = false)-> bool
        throws &FsError, &RecursiveDependency
    {
        self.createBuildDir ();
        if (!fs::sys::isFile (self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__CMAKE_FILE__))) {            
            if (!self:.createCMakeFile (inDependency-> inDependency)) return false;
        } else {
            let cmakeDate = fs::sys::fileDate (self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__CMAKE_FILE__));
            let configDate = fs::sys::fileDate (self._cwd.push (defaults::__GYLLIR_CONFIG_FILENAME__));
            
            if (cmakeDate < configDate) {
                self._context:.cleanRepo ();
                if (!self:.createCMakeFile (inDependency-> inDependency)) return false;
            }
        }

        return true;
    }

    /**
     * Compile a constructed repository using cmake
     */
    pub def compile (mut self, forTest : bool = false, forDoc : bool = false)-> bool
        throws &FsError
    {
        println ("[INFO] Compiling project : ", self._conf.name);
        let b = self._context.getArguments ().build;
        let t = self._context.getArguments ().test;
        let d = self._context.getArguments ().doc;

        if (!self:.executeCustomCommands (post-> false)) return false;
        
        let p = if (forDoc) {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__DOC_DIR__)
        } else if (forTest) {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__TEST_DIR__)
        } else if (b.isDebug ()) {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__DEBUG_DIR__)
        } else {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__RELEASE_DIR__)
        };
        
        self.createCMakeBuildDir (p);
        
        let dmut cmakeOptions = Vec!{[c8]}::new ();
        if (forDoc) {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Debug"s8);
            cmakeOptions:.push ("-DTEST_TARGET=none"s8);
            cmakeOptions:.push ("-DDOC_TARGET=doc_"s8 ~ self._conf.name);
        } else if (forTest) {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Debug"s8);
            cmakeOptions:.push ("-DTEST_TARGET=test_"s8 ~ self._conf.name);
            cmakeOptions:.push ("-DDOC_TARGET=none"s8);
        } else if (b.isDebug ()) {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Debug"s8);
            cmakeOptions:.push ("-DTEST_TARGET=none"s8);
            cmakeOptions:.push ("-DDOC_TARGET=none"s8);
        } else {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Release"s8);
            cmakeOptions:.push ("-DTEST_TARGET=none"s8);
            cmakeOptions:.push ("-DDOC_TARGET=none"s8);
        }        

        if (!self._context.runProcess ("cmake"s8, [".."s8] ~ cmakeOptions[], cwd-> p)) {
            println ("[ERROR] Failed to configure CMake.");
            return false;            
        }

        let dmut options = Vec!{[c8]}::new ();
        if (forDoc) {
            options:.push ("-j"s8 ~ d.getNbThreads ().(std::conv::to)![c8] ());        
            if (d.isVerbose ()) {
                options:.push ("VERBOSE=1"s8);
            }
        } else if (forTest) {
            options:.push ("-j"s8 ~ t.getNbThreads ().(std::conv::to)![c8] ());        
            if (t.isVerbose ()) {
                options:.push ("VERBOSE=1"s8);
            }
        } else {
            options:.push ("-j"s8 ~ b.getNbThreads ().(std::conv::to)![c8] ());        
            if (b.isVerbose ()) {
                options:.push ("VERBOSE=1"s8);
            }
        }
        
        if (forTest) {
            options:.push ("test_"s8 ~ self._conf.name);
        } else if (forDoc) {
            options:.push ("doc_"s8 ~ self._conf.name);
        }
        
        if (!self._context.runProcess ("make"s8, options[], cwd-> p, printOut-> true, printErr-> true)) {
            println ("[ERROR] Compilation failed.");
            return false;
        }
        
        if (!forDoc) {
            if (!self._context.runProcess ("make"s8, ["install"s8], cwd-> p, printErr-> true)) {
                eprintln ("[ERROR] Failed to install result");
                return false;        
            }                        
        }

        if (!self:.executeCustomCommands (post-> true)) return false;
        
        true
    }

    /**
     * Execute custom commands of the configuration file
     */
    prv def executeCustomCommands (mut self, post : bool = false)-> bool {
        let tzer = Tokenizer::new (tokens-> [" "s8]);
        for name, cmd in self._conf.commands.getList () {            
            if (cmd.post == post) {
                println ("[INFO] executing custom command : ", name);
                let tokens = tzer.tokenize (cmd.cmd);
                let mut options : [[c8]] = [];
                if (tokens.len > 1us) {
                    for o in tokens [1us .. $] {
                        if (o != " "s8) { options = options ~ [o]; }
                    }
                }

                if (!self._context.runProcess (tokens[0us], options, cwd-> Path::new (cmd.cwd), printOut-> true, printErr-> true)) {
                    eprintln ("[ERROR] failed to run custom command : ", name, "(", cmd.cmd, ")");
                    return false;
                }
            }
        }
        
        true
    }
    

    /**
     * Create the cmake file used to configure and make the repo
     */
    prv def createCMakeFile (mut self, inDependency : bool)-> bool
        throws &FsError, &RecursiveDependency
    {
        println ("[INFO] Checking dependencies : ", self._conf.name);
        let (succ, links) = self:.resolveDependencies ();
        if (!succ) return false;

        println ("[INFO] Creating cmake files : ", self._conf.name);
        with dmut file = File::create (self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__CMAKE_FILE__), write-> true) {
            file:.write ("CMAKE_MINIMUM_REQUIRED(VERSION 3.1)\n"s8);
            file:.write ("PROJECT("s8);
            file:.write (self._conf.name);
            file:.write (")\n"s8);

            let dmut linkNames = Vec!{[c8]}::new ();
            for i in links {
                file:.write ("add_subdirectory (${CMAKE_CURRENT_SOURCE_DIR}/.deps/"s8);
                file:.write (i.0);
                file:.write ("/.build/)\n"s8);

                linkNames:.push (i.1);
            }
            
            file:.write ("set(CMAKE_C_COMPILER \"/usr/bin/gyc\")\n"s8);
            
            file:.write ("set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS} -std=c++20 -g\")\n"s8);
            file:.write ("set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS} -std=c++20 -O3\")\n"s8);

            file:.write ("set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS} -g\")\n"s8);
            file:.write ("set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS} -O3\")\n\n"s8);            
            
            file:.write ("FILE (\n  GLOB_RECURSE\n  SRC\n  ../src/*.yr\n  )\n\n"s8);
            file:.write ("FILE (\n  GLOB_RECURSE\n  SRC_C\n  ../src/*.c\n  )\n\n"s8);
            file:.write ("FILE (\n  GLOB_RECURSE\n  SRC_CXX\n  ../src/*.cc\n  )\n\n"s8);
            file:.write ("FILE (\n  GLOB_RECURSE\n  SRC_TEST\n  ../test/*.yr\n  )\n\n"s8);
            
            file:.write ("SET_SOURCE_FILES_PROPERTIES(${SRC} ${SRC_TEST} PROPERTIES LANGUAGE C)\n"s8);
            file:.write ("\ninclude_directories (${CMAKE_CURRENT_SOURCE_DIR}/../src)\n\n"s8);
            
            if (!inDependency)   file:.write ("if (${TEST_TARGET} STREQUAL \"none\")\n"s8);
            if (self._conf.type.isExecutable ()) {
                file:.write ("add_executable ("s8);
                file:.write (self._conf.name);
                file:.write (" ${SRC} ${SRC_CXX} ${SRC_C})\n"s8);

                file:.write ("set_target_properties ("s8);
                file:.write (self._conf.name);
                file:.write (" PROPERTIES LINK_FLAGS \"-Wl,-rpath,./"s8);
                file:.write (defaults::__LIB_DIR__);
                file:.write ("\")\n"s8);

                file:.write ("set_target_properties("s8);
                file:.write (self._conf.name);
                file:.write (" PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)\n"s8);
                
                file:.write ("install (TARGETS "s8);
                file:.write (self._conf.name);
                file:.write (" DESTINATION ${CMAKE_SOURCE_DIR}/../)\n\n"s8);
            } else {
                file:.write ("add_library ("s8);
                file:.write (self._conf.name);
                if (self._conf.type.isShared ()) {
                    file:.write (" SHARED "s8);
                }
                file:.write (" ${SRC} ${SRC_CXX} ${SRC_C})\n"s8);

                file:.write ("install (TARGETS "s8);
                file:.write (self._conf.name);
                file:.write (" DESTINATION ${CMAKE_SOURCE_DIR}/../"s8);
                file:.write (defaults::__LIB_DIR__);
                file:.write (")\n\n"s8);
            }

            
            file:.write ("target_include_directories ("s8);
            file:.write (self._conf.name);
            file:.write (" PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../src)\n\n"s8);
            
            for i in self._conf.libraries {
                linkNames:.push (std::conv::to!{[c8]} (i));
            }

            if (linkNames.len () != 0us) {
                file:.write ("target_link_libraries ("s8);
                file:.write (self._conf.name);
                file:.write (" LINK_PUBLIC "s8);
                for i in linkNames[] {
                    file:.write (" "s8);
                    file:.write (i);
                }
                
                file:.write (")\n"s8);
            }
            
            if (!inDependency) file:.write ("endif()\n"s8);
            
            if (!inDependency) {
                file:.write ("if (${TEST_TARGET} STREQUAL \"test_"s8);
                file:.write (self._conf.name);
                file:.write ("\")\n"s8);
                file:.write ("\tadd_executable (test_"s8);
                file:.write (self._conf.name);
                file:.write (" ${SRC} ${SRC_TEST})\n"s8);
                file:.write ("\ttarget_compile_options (test_"s8);
                file:.write (self._conf.name);
                file:.write (" PRIVATE -g -funittest)\n"s8);

                file:.write ("\ttarget_link_options (test_"s8);
                file:.write (self._conf.name);
                file:.write (" PRIVATE -g -funittest)\n\n"s8);

                file:.write ("set_target_properties (test_"s8);
                file:.write (self._conf.name);
                file:.write (" PROPERTIES LINK_FLAGS \"-Wl,-rpath,./"s8);
                file:.write (defaults::__LIB_DIR__);
                file:.write ("\")\n"s8);

                file:.write ("set_target_properties(test_"s8);
                file:.write (self._conf.name);
                file:.write (" PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)\n"s8);
                
                file:.write ("install (TARGETS test_"s8);
                file:.write (self._conf.name);
                file:.write (" DESTINATION ${CMAKE_SOURCE_DIR}/../)\n\n"s8);    
                
                if (linkNames.len () != 0us) {
                    file:.write ("\ttarget_link_libraries (test_"s8);
                    file:.write (self._conf.name);
                    file:.write (" LINK_PUBLIC "s8);
                    for i in linkNames[] {
                        file:.write (" "s8);
                        file:.write (i);
                    }
                    
                    file:.write (")\n"s8);
                }
                file:.write ("endif()\n"s8);

                file:.write ("if (${DOC_TARGET} STREQUAL \"doc_"s8);
                file:.write (self._conf.name);
                file:.write ("\")\n"s8);
                file:.write ("\tadd_executable (doc_"s8);
                file:.write (self._conf.name);
                file:.write (" ${SRC})\n"s8);
                file:.write ("\ttarget_compile_options (doc_"s8);
                file:.write (self._conf.name);
                file:.write (" PRIVATE -fdoc)\n"s8);

                file:.write ("\ttarget_link_options (doc_"s8);
                file:.write (self._conf.name);
                file:.write (" PRIVATE -g -fdoc)\n\n"s8);
                
                if (linkNames.len () != 0us) {
                    file:.write ("\ttarget_link_libraries (doc_"s8);
                    file:.write (self._conf.name);
                    file:.write (" LINK_PUBLIC "s8);
                    for i in linkNames[] {
                        file:.write (" "s8);
                        file:.write (i);
                    }
                    
                    file:.write (")\n"s8);
                }
                file:.write ("endif()\n"s8);            
            }
        }

        true
    }

    /**
     * Resolve the list of dependencies
     * @returns:
     *    - .0: the list of link directories
     *    - .1: the list of libraries to link
     */
    prv def resolveDependencies (mut self)-> (bool, [([c8], [c8])])
        throws &RecursiveDependency
    {
        let mut links : [([c8], [c8])] = [];
        for name, dep in self._conf.dependencies.getList () {
            let (confName, succ) = self._context:.resolvePackageDependency (self._cwd, name.(std::conv::to)![c8] (), dep)
            if (!succ) {
                return (false, []);
            }
            
            links = links ~ [(std::conv::to![c8] (name), confName)];
        }

        (true, links)
    }
    
    /**
     * Create the directory in which building will be made    
     */
    prv def createBuildDir (self) throws &FsError {
        {
            fs::sys::createDir (self._cwd.push (defaults::__BUILD_DIR__));
        } catch {
            x : &FsError => {
                if (x.code != FsErrorCode::ALREADY_EXISTS) {
                    throw x;
                }
            }
        }
    }

    /**
     * Create the directory in which cmake building will be made    
     */
    prv def createCMakeBuildDir (self, path : &Path) throws &FsError {
        {
            fs::sys::createDir (path);
        } catch {
            x : &FsError => {
                if (x.code != FsErrorCode::ALREADY_EXISTS) {
                    throw x;
                }
            }
        }
    }

}
