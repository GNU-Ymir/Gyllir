mod gyllir::repo::builder;

import std::io;
import std::fs::_, std::env, std::args, std::config;
import gyllir::config::_;
import gyllir::repo::defaults;
import std::config::conv;
import gyllir::repo::dependency;
import gyllir::repo::manager;
import std::config::json;
import std::collection::vec;
import std::concurrency::process;

import gyllir::utils::git, gyllir::utils::errors;

/**
 * Build a repository
 */
pub class RepoBuilder {

    // The configuration of the repo to build
    let _conf : GyllirConfig;

    // The path of the repo to build
    let _cwd : &Path;

    // The context of the builder
    let dmut _context : &GyllirManager;
    
    /**
     * @params:
     *    - conf: the configuration of the repo to build
     *    - cwd: the directory of the repo to build
     */
    pub self (dmut context : &GyllirManager, conf : GyllirConfig, cwd : &Path = env::currentDir ())
        with _conf = conf, _cwd = cwd, _context = alias context
    {}
    
    /**
     * Build the repo
     */
    pub def construct (mut self)-> bool
        throws &FsError, &RecursiveDependency
    {
        self.createBuildDir ();
        if (!fs::isFile (self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__CMAKE_FILE__))) {
            if (!self:.createCMakeFile ()) return false;
        }

        return true;
    }

    /**
     * Compile a constructed repository using cmake
     */
    pub def compile (mut self)-> bool
        throws &FsError
    {
        println ("[INFO] Compiling project : ", self._conf.name);
        let b = self._context.getArguments ().build;
        
        let p = if (b.isDebug ()) {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__DEBUG_DIR__)
        } else {
            self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__RELEASE_DIR__)
        };
        
        self.createCMakeBuildDir (p);


        let dmut cmakeOptions = Vec!{[c8]}::new ();
        if (b.isDebug ()) {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Debug"s8);
        } else {
            cmakeOptions:.push ("-DCMAKE_BUILD_TYPE=Release"s8);
        }        
        
        with dmut subProc = SubProcess::run ("cmake"s8, [".."s8] ~ cmakeOptions[], cwd-> p) {
            let code = subProc:.wait ();
            if (code != 0) {
                println ("[ERROR] Failed to configure CMake.");
                return false;
            }
        }

        let dmut options = Vec!{[c8]}::new ();
        options:.push ("-j"s8 ~ b.getNbThreads ().(std::conv::to)![c8] ());        
        if (b.isVerbose ()) {
            options:.push ("VERBOSE=1"s8);
        }
        
        with dmut subProc = SubProcess::run ("make"s8, options[], cwd-> p) {
            loop {
                print (subProc:.stdout ():.readSome ());
                if (subProc.isFinished ()) {                    
                    let code = subProc:.wait ();
                    print (subProc:.stdout ():.read ());
                    if (code != 0) {
                        print (subProc:.stderr ():.read ());
                        return false;
                    } else break {}
                }
            }
        }

        let resPath = 
            if (self._conf.type.isExecutable ()) {
                self._cwd.push (self._conf.name ~ ".exe"s8)
            } else {
                __version WINDOWS {
                    self._cwd.push (self._conf.name ~ ".lib"s8)
                } else {
                    self._cwd.push (self._conf.name ~ ".a"s8)
                }
            };

        let buildPath = if self._conf.type.isExecutable () {
            p.push ("gyl_"s8 ~ self._conf.name ~ ".exe"s8)
        } else {
            p.push ("gyl_"s8 ~ self._conf.name ~ ".a"s8)
        };

        with dmut s = SubProcess::run ("rm"s8, [resPath.toStr()]) { s:.wait (); }        
        with dmut subProc = SubProcess::run ("cp"s8, [buildPath.toStr (), resPath.toStr ()]) {
            let code = subProc:.wait ();
            if (code != 0) {
                println ("[ERROR] Failed to copy result");
                return false;
            }
        }
        
        true
    }
    

    /**
     * Create the cmake file used to configure and make the repo
     */
    prv def createCMakeFile (mut self)-> bool
        throws &FsError, &RecursiveDependency
    {
        let (succ, links) = self:.resolveDependencies ();
        if (!succ) return false;
        
        with dmut file = File::create (self._cwd.push (defaults::__BUILD_DIR__).push (defaults::__CMAKE_FILE__), write-> true) {
            file:.write ("CMAKE_MINIMUM_REQUIRED(VERSION 3.1)\n"s8);
            file:.write ("PROJECT("s8);
            file:.write (self._conf.name);
            file:.write (")\n"s8);
            file:.write ("SET(CMAKE_YMIR_COMPILER \"gyc\")\n"s8);
            file:.write ("set(CMAKE_YMIR_COMPILE_OBJECT \"${CMAKE_YMIR_COMPILER} ${CMAKE_YMIR_FLAGS} <FLAGS> <INCLUDES> -c <SOURCE> -o <OBJECT>\")\n"s8);
            
            file:.write ("set(CMAKE_YMIR_OUTPUT_EXTENSION \".obj\")\n"s8);
            file:.write ("set(CMAKE_YMIR_OUTPUT_EXTENSION_REPLACE 1)\n"s8);

            file:.write ("set(CMAKE_YMIR_CREATE_STATIC_LIBRARY \"<CMAKE_AR> rc <TARGET> <LINK_FLAGS> <OBJECTS>\")\n"s8);
            file:.write ("set(CMAKE_YMIR_LINK_EXECUTABLE \"${CMAKE_YMIR_COMPILER} -o <TARGET> <OBJECTS> <LINK_FLAGS> \")\n"s8);
            file:.write ("set(CMAKE_INCLUDE_FLAG_YMIR \"-I\")\n\n"s8);
            
            file:.write ("set(CMAKE_YMIR_FLAGS_DEBUG \"${CMAKE_C_FLAGS} -g\")\n\n"s8);            
            file:.write ("set(CMAKE_YMIR_FLAGS_RELEASE \"${CMAKE_C_FLAGS} -O3\")\n\n"s8);
            file:.write ("FILE (\n  GLOB_RECURSE\n  SRC\n  ../src/*.yr\n  )\n\n"s8);            
            file:.write ("SET_SOURCE_FILES_PROPERTIES(${SRC} PROPERTIES LANGUAGE YMIR)\n"s8);

            let dmut linkNames = Vec!{[c8]}::new ();
            for i in links {
                file:.write ("add_subdirectory (${CMAKE_CURRENT_SOURCE_DIR}/.deps/"s8);
                file:.write (i);
                file:.write ("/.build/)\n"s8);

                linkNames:.push ("gyl_"s8 ~ i);
            }

            file:.write ("\ninclude_directories (${CMAKE_CURRENT_SOURCE_DIR}/../src)\n"s8);            
            if (self._conf.type.isExecutable ()) {
                file:.write ("add_executable (gyl_"s8);
                file:.write (self._conf.name);
                file:.write (" ${SRC})\n"s8);
            } else {
                file:.write ("add_library (gyl_"s8);
                file:.write (self._conf.name);
                file:.write (" ${SRC})\n"s8);
            }

            file:.write ("target_include_directories (gyl_"s8);
            file:.write (self._conf.name);
            file:.write (" PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../src)\n\n"s8);
            
            for i in self._conf.libraries {
                linkNames:.push (std::conv::to!{[c8]} (i));
            }

            if (linkNames.len () != 0us) {
                file:.write ("target_link_libraries (gyl_"s8);
                file:.write (self._conf.name);
                file:.write (" LINK_PUBLIC "s8);
                for i in linkNames[] {
                    file:.write (" "s8);
                    file:.write (i);
                }
                
                file:.write (")\n"s8);
            }
        }

        true
    }

    /**
     * Resolve the list of dependencies
     * @returns:
     *    - .0: the list of link directories
     *    - .1: the list of libraries to link
     */
    prv def resolveDependencies (mut self)-> (bool, [[c8]])
        throws &RecursiveDependency
    {
        let mut links : [[c8]] = [];
        for name, dep in self._conf.dependencies.getList () {
            if (!self._context:.resolvePackageDependency (self._cwd, name.(std::conv::to)![c8] (), dep)) {
                return (false, []);
            }
            links = links ~ [std::conv::to![c8] (name)];
        }

        (true, links)
    }
    
    /**
     * Create the directory in which building will be made    
     */
    prv def createBuildDir (self) throws &FsError {
        {
            fs::createDir (self._cwd.push (defaults::__BUILD_DIR__));
        } catch {
            x : &FsError => {
                if (x.code != FsErrorCode::ALREADY_EXISTS) {
                    throw x;
                }
            }
        }
    }

    /**
     * Create the directory in which cmake building will be made    
     */
    prv def createCMakeBuildDir (self, path : &Path) throws &FsError {
        {
            fs::createDir (path);
        } catch {
            x : &FsError => {
                if (x.code != FsErrorCode::ALREADY_EXISTS) {
                    throw x;
                }
            }
        }
    }

}
