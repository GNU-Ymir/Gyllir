mod gyllir::config::url;

import std::config;
import std::config::conv;
import std::config::error;
import std::io;
import std::tokenizer;
import std::fs::path;
import std::algorithm::searching;
import std::hash;

/**
 * There are two types of url for the moment
 * - Local ones, that are refering to file datas
 * - Git ones, that are refering to a git repository on a remote server
 */
pub enum
| LOCAL = 0u8
| GIT = 2u8
 -> UrlType;

pub enum
| LOCAL = "local:"
| GIT = "git:"
 -> UrlStarts;

/**
 * An url that is used to get refer to package repositories
 * Url seems to be a common object, maybe it has its place in the std, in the use std::net module
 */   
pub class Url {

    let mut _path : &Path = Path::new ("");

    let mut _type : UrlType = UrlType::LOCAL;

    let mut _valid = false;
    
    /**
     * Create an empty url
     */
    pub self () {}

    /**
     * Create an url from a string
     */
    pub self (c : [c8])
    {
        import std::conv;
        self:.parseStr (c.to![c32] ());
        self._valid = true;
    }

    /**
     * Create an url from a string
     */
    pub self (c : [c32])
    {
        self:.parseStr (c);
        self._valid = true;
    }
    
    /**
     * Create an url from a configuration
     * This constructor can be used by the std for deserialization
     * @example: 
     * ====================
     * def getConfiguration ()-> &Config; 
     *
     * let dmut list = getConfiguration ().to!{&Url} (); 
     * ====================
     */
    pub self (cfg : &Config)
        throws &AssertError
    {
        match cfg ["local"]? {
            Ok (Str (str-> url : _)) => {
                self._path = Path::new (url);
                self._type = UrlType::LOCAL;
                self._valid = true;
            }
            _ => {                
                match cfg ["git"]? {
                    Ok (Str (str-> url : _)) => {
                        self._path = Path::new (url);
                        self._type = UrlType::GIT;
                        self._valid = true;
                    }

                    _ => match cfg {
                        Str (str-> url : _) => {
                            self:.parseStr (url);
                            self._valid = true;
                        }
                        _ => throw AssertError::new ("malformed url");
                    }
                }
            }
        }
    }

    /**
     * @returns: the type of url
     */
    pub def getType (self)-> UrlType {
        self._type
    }

    /**
     * @returns: the path of the url
     */
    pub def getPath (self)-> &Path {
        self._path
    }

    /**
     * @returns: true if the url parsing succeded
     */
    pub def isValid (self)-> bool {
        self._valid
    }

    /**
     * @returns: true if self == o
     */
    pub def opEquals (self, o : &Url)-> bool {
        self._path == o._path &&
            self._type == o._type &&
            self._valid == o._valid
    }
    
    /**
     * Parse an url from a string
     */
    prv def parseStr (mut self, url : [c32]) {
        if url.startWith (UrlStarts::LOCAL) {            
            self._path = Path::new (url [UrlStarts::LOCAL.len - 1us .. $]);
            self._type = UrlType::LOCAL;
        } else {
            if url.startWith (UrlStarts::GIT) {
                self._path = Path::new (url [UrlStarts::GIT.len - 1us .. $]);
            } else {
                self._path = Path::new (url);
            }
            self._type = UrlType::GIT;
        }
    }
    

    impl Hashable;
    impl Streamable;
    impl Serializable {

        /**
         * Transform the url into a configuration
         */
        pub over serialize (self)-> &Config {
            import std::conv, std::config::conv;
            
            let dmut d = Dict::new (); 
            match self._type {                
                UrlType::LOCAL => { d:.insert ("local", Str::new (self._path.toStr ().to![c32] ())); }
                _ => { d:.insert ("git", Str::new (self._path.toStr ().to![c32] ())); }
            }

            d
        }
    }
        
}
