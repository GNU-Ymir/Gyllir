mod gyllir_config::args;

import std::args, std::lexer;
import std::io;

class @abstract SubCommand {

    let mut _isSet : bool;

    pub self (isSet : bool) with _isSet = isSet {}

    pub def isSet (self)-> bool {
        self._isSet 
    }
    
}

struct
| name : [c32]
| mut help : YesNo
 -> InitArgs;

pub class @final InitCommand over SubCommand {

    let mut _args = InitArgs ("", YesNo::YES);
    
    pub self () with super (false) {}

    pub self (args : [[c32]]) with super (true)
        throws &ArgumentError
    {
        let parser = ArgumentParser!(InitArgs)::new ()
            :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true)
            :.positional!"name" (comments-> "the name of the package to init");

        {
            self._args = parser.parse (["./usage"] ~ args);
        } catch {
            err : &ArgumentError => {
                println (parser.simpleUsage (cmd-> "gyllir init"));
                throw err;
            }
            _ : &HelpRequired => {
                self._args.help = YesNo::YES;
                println (parser.usage (cmd-> "gyllir init"));
                
            }
        }
            
    }

    pub def getName (self)-> [c32] {
        self._args.name
    }

    pub def isHelp (self)-> bool {
        self._args.help
    }
      
}

struct
| debug : YesNo
| mut help : YesNo
 -> BuildArgs;

pub class @final BuildCommand over SubCommand {
    let mut _args = BuildArgs (YesNo::NO, YesNo::NO);
    
    pub self () with super (false) {}

    pub self (args : [[c32]]) with super (true)
        throws &ArgumentError
    {
        let parser = ArgumentParser!(BuildArgs)::new ()
            :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true)
            :.info!"debug" (comments-> "build in debug mode (release by default)");

        {
            self._args = parser.parse (["./usage"] ~ args);
        } catch {
            err : &ArgumentError => {
                println (parser.simpleUsage (cmd-> "gyllir build"));
                throw err;
            }
            _ : &HelpRequired => {
                self._args.help = YesNo::YES;
                println (parser.usage (cmd-> "gyllir build"));
                
            }
        }
            
    }

    pub def isDebug (self)-> bool {
        self._args.debug
    }

    pub def isHelp (self)-> bool {
        self._args.help
    }

}
