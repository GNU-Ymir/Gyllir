mod gyllir_config::file_struct;

import std::config;
import std::config::conv;
import std::config::error;
import std::collection::map;
import std::io;
import std::tokenizer;
import std::config::conv;
import std::conv;

pub struct
| name: [c8]
| license : [c8]
| description : [c8]
| type : [c8]
| author: [c8]
| version: &Version
| mut dependencies: &DependenciesList
 -> Content; // drole de nom

pub struct
| version: &Version
| url: [c8]
 -> Dependency;

pub class DependenciesList {

    pub let dmut _package = HashMap!{[c32], Dependency}::new ();

    pub self () {}

    pub self (elem : &HashMap!{[c32], Dependency}) {
        for i, j in elem {                           
            self._package:.insert (i, j)
        }
    }
    
    pub self (cfg : &Config) throws &AssertError
    {
        match cfg {
            x : &Dict => {
                self:.insert (x);
            }
            _ => {
                assert (false, "Error: not a dictionnary");
            }
        }
    }

    prv def insert (mut self, elem : &Dict) throws &AssertError
    {
        for i, j in elem {                
            {    
                self._package:.insert (i, j.to!Dependency())
            }
            catch {
                _ : &ConfigError => {
                    assert (false, "For package '" ~ i ~ "' : ");                    
                 }
            }            
        }
    }

    pub def remove (mut self, elem : [c32]) -> bool {
        let find = self._package:.find(elem);
        return match find {
            Ok() => {
                self._package:.remove(elem);
                true
            }
            Err() => { false }
            _ => { false }
        }
    }

    impl std::io::Printable;

    impl core::duplication::Copiable {
        pub over deepCopy (self) -> dmut &DependenciesList
        {
            let mut dep = DependenciesList::new(self._package);
            return dep;
        }
    }
    
    impl std::config::conv::Serializable {
        pub over serialize (self)-> &Config {
            let dmut d = Dict::new ();
            for i, j in self._package {
                d:.insert(i,j.to!(&Config)());
            }
            d
        }
    }
}

pub class Version {

    pub let mut _value = "0.1.0"; 
    
    pub self () {}

    pub self (cfg : &Config) throws &AssertError
    {
        match cfg {
            Str (str->  version: _) => {
                let tzer = Tokenizer::new (tokens-> ["."])
                let res = tzer.tokenize (version);
                {
                    let major = (res[0].to!u64())? // on catch Ã  la fois, OutOfArray et CastFailure
                    let minor = (res[2].to!u64())?
                    let patch = (res[4].to!u64())?
                    let _ = match major {
                        Ok (a : u64) => { a }
                        Err (_ : &OutOfArray) => { throw AssertError::new ("need a major version") }
                        Err (_ : &CastFailure) => { throw AssertError::new ("Invalid major number") }
                        _  => { 0u64 }
                    }
                    
                    let _ = match minor {
                        Ok (b: u64) => { b }
                        Err (_ : &CastFailure) => { throw AssertError::new ("Invalid minor number") }
                        _  => { 0u64 } 
                    }
                    
                    let _ = match patch {
                        Ok (c : u64) => { c }
                        Err (_ : &CastFailure) => { throw AssertError::new ("Invalid patch number") }
                        _  => { 0u64 } 
                    }
                } catch {
                    _ => {
                        println ("invalid version number");
                    }
                }
                
                self._value = version;
            }
            _ => {
                assert (false, "version must be a string");
            }
        }            
    }
    
    impl std::io::Printable;

    impl std::config::conv::Serializable {
        pub over serialize (self)-> &Config {
           return self._value.to!(&Config)();
        }
    }
}
