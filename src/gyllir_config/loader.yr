mod gyllir_config::loader;

import std::io;
import std::tokenizer;
import std::config::toml;
import std::fs::_, std::env;
import std::config;
import std::conv;
import std::config::conv;
import gyllir_config::file_struct;

aka __FILENAME__ = "gyllir.toml"s8
    
pub def init (name : [c8], author : [c8], license : [c8], description : [c8], type : [c8]) -> Content {
    return Content (name-> name,
                    version-> Version::new (),
                    author-> author,
                    dependencies-> DependenciesList::new (),
                    license-> license,
                    description-> description,
                    type-> type);
}

pub def load () -> Content? {
    with dmut f = File::open (Path::new (__FILENAME__)) {
        let str = f:.readAll ();
        return (parse (str).to!Content ())?;            
    } catch {
        x : _ => { // on catch tout
            println (x); 
        }
    }
    return ((Content)?)::_err_
}

pub def createRepo (path : &Path, ct : Content)
    throws &FsError
{
    createRepo (path, ct.to!{&Config} ())
}

prv def createRepo (path : &Path, cfg : &Config)
    throws &FsError
{
    fs::createDir (path, recursive-> true)?;
    with dmut f = File::create (path.push (__FILENAME__), write-> true) {
        let str = cfg.dump ().to![c8] ();
        f:.write (str);            
    }
}
