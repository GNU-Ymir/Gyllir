mod gyllir_config::builder;

import std::io;
import std::fs::_, std::env;
import gyllir_config::file_struct;
import std::collection::vec;
import std::concurrency::process;

aka __YMIR_EXTENSION__ = "yr"s8;

pub def build (ct : Content, debug : bool, verbose : bool)
{
    let cwd = env::currentDir ();
    fs::createDir (cwd.push (".build"s8))?;
    let files = listSourceFiles (cwd.push ("src"s8));
    let dmut build = Vec!{[c8]}::new ();
    let mut percent = 0u64;
    for file in files {
        let oname = file.addExtension ("o"s8).file ();
        let odir = cwd.push (".build"s8).push (file.parent ().removePrefix (cwd.push ("src"s8)));
        fs::createDir (odir, recursive-> true)?;

        let prc = ((percent * 100u64) / files.len);
        if (prc < 10u64)
            println ("[  ", prc, "%] Building object ", odir.push (oname).toStr ());
        else println ("[ ", prc, "%] Building object ", odir.push (oname).toStr ());
        if (verbose) {
            println ("     Running cmd ", "gyc"s8, " ", "-c"s8, " ", "-o"s8, " ", odir.push (oname).toStr (), " ", file.toStr (), " ", "-I"s8, " ", cwd.push ("src"s8).toStr (), " ", if (debug) "-g"s8 else "-O3"s8);
        }
        with dmut subProc = SubProcess::run ("gyc"s8, ["-c"s8, "-o"s8, odir.push (oname).toStr (), file.toStr (), "-I"s8, cwd.push ("src"s8).toStr (), if (debug) "-g"s8 else "-O3"s8], cwd-> cwd.push (".build"s8)) {
            let code = subProc:.wait ();
            if (verbose) {
                println (subProc:.stdout ():.read ());
            }
            if (code != 0) {
                println (subProc:.stderr ():.read ());
                return {}
            }
            build:.push (odir.push (oname).toStr ());
        }
        
        percent += 1u64;
    }
    
    if (ct.type == "executable"s8) {
        println ("[100%] Linking executable ", ct.name);
        with dmut subProc = SubProcess::run ("gyc"s8, ["-o"s8, ct.name, if (debug) "-g"s8 else "-O3"s8] ~ build[], cwd-> cwd) {
            let code = subProc:.wait ();
            if (code != 0) {
                println (subProc:.stderr ():.read ());                
            }
        }
    }
}

prv def listSourceFiles (path : &Path) -> [&Path] {
    let dmut res = Vec!(&Path)::new ();
    {
        for entry in fs::readDir (path) {
            match entry {
                f : &FileEntry => {
                    if (f.getPath ().extension () == __YMIR_EXTENSION__) {
                        res:.push (path.push (f.getPath ()));
                    }
                }
                d : &DirEntry => {
                    let files = listSourceFiles (path.push (d.getPath ()));
                    for i in files {
                        res:.push (i);
                    }
                }
            }
        }
    } catch {
        _ => {}
    }
    
    res:.fit ();
    res []
} 
