mod GyllirConfig::Toml;

import std::io;
import std::tokenizer;
import std::config::toml;
import std::fs::file;
import std::config;
import std::conv;
import std::config::conv;
import GyllirConfig::FileStruct;

aka __FILENAME__ = "gyllir.toml"
    
pub def init(name : [c32], author : [c32]) -> Content{
    return Content(name,Version::new(),author,DependenciesList::new());
}
 
pub def load() -> Content? {
    with dmut f = File::open (__FILENAME__) {
        let str = f:.readAll ();
        return (parse (str).to!Content())?;            
    } catch {
        x : _ => { // on catch tout
            println (x); 
        }
    }
    return ((Content)?)::_err_
}

pub def save(ct : Content){
    save (ct.to!{&Config, Content} ())
}

pub def save(cfg : &Config){
    with dmut f = File::create (__FILENAME__, write-> true) {
        let str = cfg.dump ().to![c8]();
        f:.write(str);            
    } catch {
        x : _ => { // on catch tout
            println (x); 
        }  
    }
}
