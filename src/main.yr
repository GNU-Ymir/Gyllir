import std::io;
import std::lexer;
import std::args;
import std::conv;
import gyllir_config::loader;

struct
| help: YesNo
| init: [c32] = ""
| check : YesNo
| status : YesNo
 -> GyllirArgs;

def initRepo (name : [c32]) {
    println ("init project " ~ name);
    let author = read![c8](ask-> "Please enter your author name : ");
    let toml = loader::init (name,author.to![c32]());
    loader::save (toml);
}

def statusRepo () {
    
}

def checkRepo() {
    let tml = loader::load ();
    tml.println ();
}

def main (args : [[c8]]) {
    let x = ArgumentParser!(GyllirArgs)::new ()
        :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true)
        :.info!"init" (comments-> "initialize a gyllir repository and create the gyllir config file.")
        :.info!"check" (comments-> "check if the gyllir config file is syntactically correct.")
        :.info!"status" (comments-> "print the status of the current ymir repo.");
        
    {
        let f = x.parse (args);
        if (f.init.len != 0u64) {
            initRepo (f.init);
        } else if (f.status) {
            statusRepo ();
        } else if (f.check) {
            checkRepo();
        } else {
           println (x.simpleUsage ());
        }
    } catch {
        err : &ArgumentError => {
            println (x.simpleUsage ());
            println (x.diagnosis (err));
        }
        _ : &HelpRequired => {
            println (x.usage ());
        }
    }
}
