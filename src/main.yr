import std::io;
import std::lexer;
import std::args;
import std::conv, std::env;
import gyllir_config::loader, gyllir_config::builder;
import utils::git;
import utils::errors;
import gyllir_config::args;
import gyllir_config::file_struct;

struct
| help: YesNo
| init : &InitCommand = InitCommand::new () // gyllir_config::args
| build : &BuildCommand = BuildCommand::new ()
| remove : &RemoveCommand = RemoveCommand::new()
 -> GyllirArgs;

def askFor (ask : [c8], default : [c8] = ""s8) -> [c8] {
    let x = read![c8] (ask-> (ask ~ " ["s8 ~ default ~ "]:"s8).to![c32] ());
    if x == ""s8 {
        default
    } else x
}

def initRepo (dirName : [c32]) {
    let path = env::currentDir ().push (dirName.to![c8] ());
    if isFile (path.push ("gyllir.toml"s8)) {
        println ("The target directory already contains a 'gyllir.toml' file. Aborting.");
    } else {
        let name = askFor ("Name"s8, default-> dirName.to![c8] ());
        let author = askFor ("Author name"s8, default-> env::whoami ()); // peut être remplacer ça par (git config --list --global) ["user.name"] ~ ["user.email"]
        let descr = askFor ("Description"s8, default-> "A minimal Ymir app"s8);
        let license = askFor ("License"s8, default-> "proprietary"s8);
        let type = askFor ("Type (executable/library)"s8, default-> "executable"s8);

        // peut être meme ne pas demander et juste remplir le fichier, si l'utilisateur veux modifier il n'a qu'a modifier le fichier
        let toml = loader::init (name, author, license, descr, type);
        {
            loader::createRepo (path, toml);       
            git::init (cwd-> path);
            git::add (path.push ("."s8));
            git::commit ("Initial commit"s8, cwd-> path);
            println ("Successfully created an empty project in '"s8 ~ path.toStr () ~ "'"s8);
        } catch {
            x : _ => {
                println (x);
            }
        }
    }
}

def removeDep(dependency: [c32]){
    let path = env::currentDir ();
    let mut gyllir = loader::load ();
    match gyllir {
        Ok (cfg : _) => {
            let dmut dep = dcopy cfg.dependencies;
            let ok = dep:.remove(dependency);
            if(ok){
                {
                let newfile = Content(cfg.name,cfg.license,cfg.description,cfg.type,cfg.author,cfg.version,dep);

                loader::saveToml(path,newfile);
                    println ("Dependency removed");
                }catch{
                    _: &(std::fs::errors::FsError) => { println ("IO Error");}
                }
            }else{
                println ("No dependency found with the name '" ~ dependency ~ "'. Aborting");
            }
                
        }
        Err () => {
            println ("No package manifest found in '"s8 ~ env::currentDir ().toStr () ~ "'. Aborting"s8);
        }
    }
}

def buildRepo (debug : bool, verbose : bool) {
    let gyllir = loader::load ();
    match gyllir {
        Ok (cfg : _) => {
            builder::build (cfg, debug, verbose);
        }
        Err () => {
            println ("No package manifest found in '"s8 ~ env::currentDir ().toStr () ~ "'. Aborting"s8);
        }
    }
}

def statusRepo () {
    
}

def main (args : [[c8]]) {
    let x = ArgumentParser!(GyllirArgs)::new ()
        :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true)
        :.info!"init" (comments-> "initialize a gyllir repository and create the config file.")
        :.info!"build" (comments-> "build the project in the current directory")
        :.info!"remove" (comments-> "Remove a dependency");
    
        
    {
        let f = x.parse (args);
        if (f.init.isSet ()) {
            if (!f.init.isHelp ()) { // true si on a affiché l'help
                initRepo (f.init.getName ());
            }
        } else if (f.build.isSet ()) {
            if (!f.build.isHelp ()) {
                buildRepo (f.build.isDebug (), f.build.isVerbose ());
            }
        } else if (f.remove.isSet ()){
            if(!f.remove.isHelp ()){
                removeDep(f.remove.getName());
            }
        } else {
            println (x.simpleUsage (cmd-> "gyllir"));
        }
    } catch {
        err : &ArgumentError => {
            println (x.diagnosis (err));
        }
        _ : &HelpRequired => {
            println (x.usage (cmd-> "gyllir"));
        }
    }
}
